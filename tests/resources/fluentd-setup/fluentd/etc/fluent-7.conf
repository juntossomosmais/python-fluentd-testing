# Input sample
# echo '2024-02-11T08:15:40.012345Z stdout F 2025/02/05 13:53:03 [error] 28#28: *1290584 upstream timed out (110: Operation timed out) while reading response header from upstream, client: 10.12.0.11, server: shalu.production.juntossomosmaisi.com.br, request: "GET /api/v1/skus/ce1b2e20-87f0-47c6-afa2-d54750103e04/price/ HTTP/1.1", upstream: "http://192.168.22.75:8080/api/v1/skus/ce1b2e20-87f0-47c6-afa2-d54750103e04/price/", host: "shalu.production.juntossomosmaisi.com.br", referrer: "https://www.juntossomosmais.com.br/"' | fluent-cat --none -p 24228 jsm.testing
# echo '2024-02-11T08:15:40.012345Z stdout F 2025/02/12 17:57:29 [error] 29#29: *397216 [lua] balancer.lua:203: route_to_alternative_balancer(): no alternative balancer for backend: qa-catalog-service-2-8080, client: 10.11.0.14, server: catalog.homolog.juntossomosmaisi.com.br, request: "POST /v2/carousels/list HTTP/1.1", host: "catalog.homolog.juntossomosmaisi.com.br", referrer: "https://loja.homolog.juntossomosmaisi.com.br/"' | fluent-cat --none -p 24228 jsm.testing

<source>
  @type forward
  port 24228
  bind 0.0.0.0
</source>

<match fluentd.**>
  @type null
</match>

<filter jsm.*>
  @type parser
  key_name message
  <parse>
    @type regexp
    expression /^(?<time>.+) (?<stream>stdout|stderr)( (.))? (?<log>.*)$/
    time_format %Y-%m-%dT%H:%M:%S.%NZ
    types stream:string,logtag:string,log:string
  </parse>
</filter>

<filter jsm.*>
  @type grep
  <regexp>
    key log
    pattern /^\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2} \[error\]/
  </regexp>
</filter>

<filter jsm.*>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type regexp
    expression /^(?<time>\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) \[(?<levelname>\w+)\] \d+#\d+: \*\d+ (?<message>.*?), client: [\d\.]+, server: [^,]+, request: "(?<request>[^"]+)", (?:upstream: "[^"]+", )?host: "(?<host>[^"]+)"(?:, referrer: "(?<referrer>[^"]+)")?$/
  </parse>
</filter>

<filter jsm.*>
  @type record_transformer
  enable_ruby true
  <record>
    application {
      "levelname": "${record['levelname']}",
      "message": "${record['message']}",
      "request": "${record['request']}",
      "host": "${record['host']}",
      "referrer": "${record['referrer']}"
    }
  </record>
  remove_keys levelname,host,referrer,message,request
</filter>

<match jsm.*>
  @type stdout
  <format>
    @type json
  </format>
</match>
