<source>
  @type http
  port 24232
  bind 0.0.0.0
</source>

<filter jsm.*>
  type split_array
</filter>

<match jsm.*>
  @type rewrite_tag_filter
  <rule>
    key $.data.type
    pattern /^du|f|fapi|fc|fce|fco|fcoa|fcp|fcph|fcpn|fcpr|fcpro|fcu|fd|fdeac|fdeaz|fdecc|fdu|feacft|feccft|fede|fens|feoobft|feotpft|fepft|fepotpft|fercft|fertft|ferrt|fi|flo|fn|fp|fs|fsa|fu|fui|fv|fvr|gd_auth_failed|gd_otp_rate_limit_exceed|gd_recovery_rate_limit_exceed|gd_send_sms_failure|gd_send_voice_failure|gd_start_enroll_failed|gd_webauthn_enrollment_failed$/
    tag alert.label.jsm
  </rule>
  <rule>
    # Catch all rule so it does not drop the record
    key $.data.type
    pattern .*
    tag unknown.label.jsm
  </rule>
</match>

<filter alert.label.jsm>
  @type record_modifier
  <record>
    severity 'alert'
  </record>
</filter>

<filter **.jsm.**>
  @type record_modifier
  remove_keys _dummy_
  <record>
    _dummy_ ${if record['data'].has_key?('description'); record['content'] = record['data']['description']; elsif record['data'].has_key?('details') and record['data']['details'].has_key?('error') and record['data']['details']['error'].has_key?('message'); record['content'] = record['data']['details']['error']['message']; else record['content'] = 'N/A'; end; nil}
  </record>
</filter>

<filter **.jsm.**>
  @type record_modifier
  remove_keys _dummy_
  <record>
    _dummy_ ${if record['data'].has_key?('details'); record['detail'] = record['data']['details']; else record['detail'] = 'N/A'; end; nil}
  </record>
</filter>

<filter **.jsm.**>
  @type record_transformer
  enable_ruby
  renew_record
  <record>
    content ${record["content"]}
    date ${record["data"]["date"]}
    severity ${record["severity"]}
    service.name 'auth0'
    data.detail ${record["detail"]}
    service.namespace ${record["data"]["strategy"]}|${record["data"]["strategy_type"]}|${record["data"]["connection"]}
    audit.action ${record["data"]["type"]}
    audit.identity ${record["data"]["user_id"]}
    audit.result ${record["data"]["details"]["error"]["message"]}
    trace_id ${record["log_id"]}
    log.source 'fluentd'
  </record>
</filter>

<match **.jsm.**>
  @type file
  path /result/fluent-dynatrace-output-3.log
  append true
  add_path_suffix false
  <format>
      @type json
  </format>
  <buffer []>
      @type memory
      chunk_limit_records 1
      retry_max_times 0
  </buffer>
</match>
